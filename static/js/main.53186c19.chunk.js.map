{"version":3,"sources":["logo.svg","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","name","email","id","className","alt","src","CardList","robots","map","Child","index","key","SearchBox","dynamicSearch","type","placeholder","onChange","Scroll","console","log","children","style","overflowY","border","height","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","TypicodeUsers","filteredRobots","this","filter","individual","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0JAAAA,EAAOC,QAAU,IAA0B,kC,sICoB5BC,G,YAlBF,SAACC,GAAW,IAChBC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACrB,OACC,yBAAKC,UAAU,uDAKd,yBAAKC,IAAI,SAASC,IAAG,mCAA8BH,EAA9B,cACrB,6BACC,4BAAKF,GACL,2BAAIC,GACJ,2BAAIC,OCyBOI,EAnCE,SAACP,GAAU,IAGnBQ,EAAWR,EAAXQ,OAaR,OAEA,yBAAKJ,UAAU,MAEd,4BAECI,EAAOC,KAAM,SAACC,EAAOC,GACrB,OAAO,kBAAC,EAAD,CACJC,IAAKD,EACLR,GAAIK,EAAOG,GAAOR,GAClBF,KAAMO,EAAOG,GAAOV,KACpBC,MAAOM,EAAOG,GAAOT,aCjBZW,EAZG,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACnB,OACA,yBAAKV,UAAU,OACd,2BACCA,UAAU,kCACVW,KAAK,SACLC,YAAY,kBACZC,SAAUH,MCEEI,EATA,SAAClB,GAEf,OADAmB,QAAQC,IAAIpB,EAAMqB,UAElB,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEzB,EAAMqB,WCiGMK,E,YA9Fb,aAAe,IAAD,8BACZ,+CAqBJC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SArBvC,EAAKC,MAAQ,CAGXzB,OAAQ,GACRsB,YAAa,IANH,E,iFAUK,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAM,SAAAG,GACL,EAAKT,SAAS,CAACrB,OAAQ8B,OAG3BnB,QAAQC,IAAI,yB,+BAOJ,IAAD,OAGCmB,EAAiBC,KAAKP,MAAMzB,OAAOiC,QAAO,SAAAC,GAC9C,OAAOA,EAAWzC,KAAK0C,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAGvE,OACE,yBAAKvC,UAAU,MACb,wBAAIA,UAAU,MAAd,aACA,kBAAC,EAAD,CAAWU,cAAe0B,KAAKb,iBAC/B,4BAGA,kBAAC,EAAD,KACG,kBAAC,EAAD,CAAUnB,OAAU+B,KAEvB,6DAAmCC,KAAKP,MAAMzB,OAAOqC,a,GA5C3CC,a,MCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCHNC,IAASC,OAER,kBAAE,EAAF,MAAUC,SAASC,eAAe,SDkH7B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.53186c19.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\tconst { name, email, id } = props;\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\r\n\t{/* make sure that you use back ticks `` and not single quotes '' \r\n\t\t<img alt='photos' src={`https://robohash.org/${id}?200x200`} />\r\n\t*/}\r\n\t\t\t<img alt='photos' src={`https://picsum.photos/id/${id}/200/200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t\t<p>{id}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n//CardList is accepting a robots prop from App.js\r\nconst CardList = (props) => {\r\n\t\r\n\t//const { name, email, id} = props;\r\n\tconst { robots } = props;\r\n\r\n//.map is loop through an array\r\n\r\n// const cardComponent = robots.map ((Child, index) => {\r\n// \treturn <Card \r\n// \t\tkey={index}\r\n// \t\tid={robots[index].id} \r\n// \t\tname={robots[index].name} \r\n// \t\temail={robots[index].email}/> \r\n// })\r\n\r\n\r\n\treturn (\r\n\r\n\t<div className='tc'> \r\n\r\n\t\t<p></p>\r\n\t\t{\r\n\t\t\trobots.map ( (Child, index) => {\r\n\t\t\treturn <Card \r\n\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\tid={robots[index].id} \r\n\t\t\t\t\t\tname={robots[index].name} \r\n\t\t\t\t\t\temail={robots[index].email}/>\r\n\t\t\t})\r\n\t\t}\r\n\t</div>\r\n\t)\r\n}\r\n\r\n/* instead of returning {cardComponent} */\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({dynamicSearch}) => {\r\n\treturn (\r\n\t<div className='pa2'>\r\n\t\t<input \r\n\t\t\tclassName='pa3 ba b--gren bg-lightest-blue'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='Search for User'\r\n\t\t\tonChange={dynamicSearch} />\r\n\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\tconsole.log(props.children);\r\n\treturn(\r\n\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n\t\t{props.children}\r\n\t</div>\r\n\t)\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\nimport logo from '../logo.svg';\nimport './App.css';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport {robots} from '../robots';\nimport Scroll from '../components/Scroll';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      // robots: robots,\n      // [] because we aren't calling from the array anymore\n      robots: [],\n      searchfield: ''\n    }\n }\n\ncomponentDidMount() {\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=> {\n      return response.json();\n    })\n    .then (TypicodeUsers => {\n      this.setState({robots: TypicodeUsers})\n    });\n\n  console.log('The app was mounted');\n}\n\nonSearchChange = (event) => {\n  this.setState({searchfield: event.target.value})\n}\n\nrender() {\n\n    { /*const {robots, searchfield} = this.state */ }\n    const filteredRobots = this.state.robots.filter(individual => {\n      return individual.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n    })\n\n    return (\n      <div className='tc'> \n        <h1 className='f1'>User List</h1>\n        <SearchBox dynamicSearch={this.onSearchChange}/>\n        <p></p>\n\n      {/*Scroll also returns something*/}\n        <Scroll>\n           <CardList robots = {filteredRobots} /> \n        </Scroll>\n        <p>Number of unfiltered users is: {this.state.robots.length}</p>\n      </div>\n    )\n  }\n}\n\n\n// class App extends React.Component {\n//   render() {\n//     return (\n//           <div className=\"App\">\n//             <header className=\"App-header\">\n//               <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//               <p>\n//                 Edit <code>src/App.js</code> and save to reload.\n//               </p>\n//               <a\n//                 className=\"App-link\"\n//                 href=\"https://reactjs.org\"\n//                 target=\"_blank\"\n//                 rel=\"noopener noreferrer\"\n//               >\n//                 Learn React\n//               </a>\n//             </header>\n//           </div>\n//     )\n//   }\n// }\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n\n//import Hello from './Hello';\n//import Card from './Card';\n//import CardList from './CardList';\n//import {robots} from './robots';\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nReactDOM.render(\n\t//Need App.JS to connect Robots and SearchBox\n\t< App />, document.getElementById('root')\n\n\t//This was ok when we didn't need a bridge between Robots and SearchBox\n\t//<CardList robots = {robots} />, document.getElementById('root')\n\n);\n\n\n// ReactDOM.render(<div> \n// \t<Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/> \n// \t<Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\n// \t<Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\n// \t</div>\n// \t);\n\n//ReactDOM.render(<Hello greeting = {'Jethro Cheng HQO'} /> , document.getElementById('root'));\n//ReactDOM.render(<App />, document.getElementById('root'));\n//ReactDOM.render(<h1>Hello World!</h1>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}